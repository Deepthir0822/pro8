5.
-> Creating react app –  
npx create-react-app issue-tracker
cd issue-tracker
 
➔ App.js
import React from 'react';
import './App.css';
 
const issues = [
 {
   id: 1,
   title: "Bug in login page",
   description: "The login page throws an error when submitting invalid credentials.",
   status: "Open",
 },
 {
   id: 2,
   title: "UI glitch on homepage",
   description: "There is a UI misalignment issue on the homepage for smaller screens.",
   status: "Closed",
 },
 {
   id: 3,
   title: "Missing translation for settings page",
   description: "The settings page is missing translations for the Spanish language.",
   status: "Open",
 },
 {
   id: 4,
   title: "Database connection error",
   description: "Intermittent database connection issue during peak hours.",
   status: "Open",
 },
];
 
const Issue = ({ title, description, status }) => {
 return (
   <div className="issue">
     <h3>{title}</h3>
     <p>{description}</p>
     <span className={`status ${status.toLowerCase()}`}>{status}</span>
   </div>
 );
};
 
const App = () => {
 return (
   <div className="App">
     <h1>Issue Tracker</h1>
     <div className="issue-list">
       {issues.map((issue) => (
         <Issue
           key={issue.id}
           title={issue.title}
           description={issue.description}
           status={issue.status}
         />
       ))}
     </div>
   </div>
 );
};
 
export default App;
 
➔ App.css
.App {
 font-family: Arial, sans-serif;
 text-align: center;
 margin: 20px;
}
 
h1 {
 color: #333;
}
 
.issue-list {
 display: flex;
 flex-direction: column;
 align-items: center;
}
 
.issue {
 background-color: #f9f9f9;
 border: 1px solid #ccc;
 border-radius: 5px;
 padding: 15px;
 margin: 10px;
 width: 80%;
 max-width: 600px;
 box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}
 
.issue h3 {
 margin: 0 0 10px;
 font-size: 1.5em;
}
 
.issue p {
 margin: 0 0 10px;
 color: #555;
}
 
.status {
 font-weight: bold;
}
 
.status.open {
 color: #e74c3c;
}
 
.status.closed {
 color: #2ecc71;
}
Start development server –
cd issue-tracker
npm install weeb-vitals
npm start
6.
npx create-react-app counter-app
cd counter-app
---------------------------
Counter.js
import React, { useState, useEffect } from 'react';
 
const Counter = () => {
 const [count, setCount] = useState(0);
 
 useEffect(() => {
   console.log('Fetching initial data...');
 }, []);
 
 const increment = () => setCount(prevCount => prevCount + 1);
 const decrement = () => setCount(prevCount => prevCount - 1);
 const doubleCount = () => setCount(prevCount => prevCount * 2);
 const resetCount = () => setCount(0);
 
 return (
   <div>
     <h1>Count: {count}</h1>
     <button onClick={increment}>Increment</button>
     <button onClick={decrement}>Decrement</button>
     <button onClick={doubleCount}>Double</button>
     <button onClick={resetCount}>Reset</button>
   </div>
 );
};
export default Counter;
---------------------------------------------
CounterClass.js
import React, { Component } from 'react';
 
class Counter extends Component {
 constructor(props) {
   super(props);
   this.state = { count: 0 };
 }
 
 componentDidMount() {
   console.log('Fetching initial data...');
 }
 
 increment = () => {
   this.setState(prevState => ({ count: prevState.count + 1 }));
 };
 
 decrement = () => {
   this.setState(prevState => ({ count: prevState.count - 1 }));
 };
 
 doubleCount = () => {
   this.setState(prevState => ({ count: prevState.count * 2 }));
 };
 
 resetCount = () => {
   this.setState({ count: 0 });
 };
 
 render() {
   return (
     <div>
       <h1>Count: {this.state.count}</h1>
       <button onClick={this.increment}>Increment</button>
       <button onClick={this.decrement}>Decrement</button>
       <button onClick={this.doubleCount}>Double</button>
       <button onClick={this.resetCount}>Reset</button>
     </div>
   );
 }
}
 
export default Counter;
------------------------------------------------
App.js
import React from 'react';
import './App.css';
import Counter from './CounterClass';
function App() {
 return (
   <div className="App">
     <h1 className='head'>Welcome to the Counter App</h1>
     <Counter />
   </div>
 );
}
export default App;
 
App.css
.App {
 border-radius: 7px;
 background: #ffeaea;
 text-align: center;
}
#root {
 margin: 20px auto;
 width: 40%;
 height: 400px;
}
h1 {
 color: #fff;
 font-size: 25px;
 border-radius: 6px;
 margin: 20px auto;
 background: #000000;
 width: fit-content;
 padding: 10px 60px;
}
.head {
 width: 100%;
 font-size: 25px;
 margin: 0;
 border-radius: 6px;
 color: #fff;
 background: #000000;
 padding: 10px 0;
}
button {
 margin: 10px;
 padding: 8px 10px;
 font-size: 16px;
 border: none;
 font-weight: 600;
 border-radius: 5px;
 cursor: pointer;
 background: #e02020;
 color: #fff;
}
command - npm start
7.
Step1 –
mkdir express-api
cd express-api
npm init -y
npm install express
----------------------------------
• Create server.js file inside the express-api folder. Right click on the express-api folder and create file server.js.
• After then copy the below code and paste it in that server.js file, save it.
const express = require('express');
const app = express();
 
// Middleware to log requests to the console
app.use((req, res, next) => {
   console.log(`${req.method} request made to: ${req.url}`);
   next();
});
 
// Middleware to parse JSON payloads
app.use(express.json());
 
// Root endpoint to return "Hello, Express!"
app.get('/', (req, res) => {
   res.send('Hello, Express!');
});
 
// Sample in-memory data for products
let products = [
   { id: 1, name: 'Laptop', price: 1000 },
   { id: 2, name: 'Phone', price: 500 }
];
 
// GET /products: Returns a list of all products
app.get('/products', (req, res) => {
   res.json(products);
});
 
// POST /products: Adds a new product
app.post('/products', (req, res) => {
   const { name, price } = req.body;
   if (!name || !price) {
       return res.status(400).json({ message: 'Name and price are required' });
   }
   const newProduct = { id: products.length + 1, name, price };
   products.push(newProduct);
   res.status(201).json(newProduct);
});
 
// GET /products/:id: Returns details of a specific product
app.get('/products/:id', (req, res) => {
   const product = products.find(p => p.id === parseInt(req.params.id));
   if (!product) {
       return res.status(404).json({ message: 'Product not found' });
   }
   res.json(product);
});
 
// PUT /products/:id: Updates an existing product
app.put('/products/:id', (req, res) => {
   const product = products.find(p => p.id === parseInt(req.params.id));
   if (!product) {
       return res.status(404).json({ message: 'Product not found' });
   }
   const { name, price } = req.body;
   if (!name || !price) {
       return res.status(400).json({ message: 'Name and price are required' });
   }
   product.name = name;
   product.price = price;
   res.json(product);
});
 
// DELETE /products/:id: Deletes a product
app.delete('/products/:id', (req, res) => {
   const productIndex = products.findIndex(p => p.id === parseInt(req.params.id));
   if (productIndex === -1) {
       return res.status(404).json({ message: 'Product not found' });
   }
   products.splice(productIndex, 1);
   res.status(204).send();
});
 
// Start the server on port 3000
const PORT = 3000;
app.listen(PORT, () => {
   console.log(`Server is running on http://localhost:${PORT}`);
});
